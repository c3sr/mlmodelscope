/**
 * {{&summary}}
 * @method
 * @name {{&className}}#{{&methodName}}
 * @param {object} parameters - method options and parameters
{{#parameters}}
    {{^isSingleton}} * @param {{=<% %>=}}{<%&type%>}<%={{ }}=%> parameters.{{&camelCaseName}} - {{&description}}{{/isSingleton}}
{{/parameters}}
 */
export function {{&methodName}}(params){
    {{#isES6}}let{{/isES6}}{{^isES6}}var{{/isES6}} urlPath = '{{&path}}';
    {{#isES6}}let{{/isES6}}{{^isES6}}var{{/isES6}} body = {}, queryParameters = {}, headers = params.headers || {}, form = {};

    {{#isSecure}}
        headers = this.setAuthHeaders(headers);
    {{/isSecure}}
    {{#headers}}
        headers['{{&name}}'] = [{{&value}}];
    {{/headers}}

    if (has(params, "requestId")) {
        headers['X-Request-ID'] = params.requestId;
    } else if (has(params, "X-Request-ID")) {
        headers['X-Request-ID'] = params["X-Request-ID"];
    } else {
        headers['X-Request-ID'] = uuid();
    }


  return function {{&methodName}}Request({ http, path, resolve }) {

    let parameters = params;

    if(parameters === undefined) {
        parameters = {};
    }

    {{#parameters}}
        {{#isQueryParameter}}
            {{#isSingleton}}
                queryParameters['{{&name}}'] = '{{&singleton}}';
            {{/isSingleton}}
            {{^isSingleton}}
                {{#isPatternType}}
                    Object.keys(parameters).forEach(function(parameterName) {
                        if(new RegExp('{{&pattern}}').test(parameterName)){
                            queryParameters[parameterName] = resolve.value(parameters[parameterName]);
                        }
                    });
                {{/isPatternType}}
                {{#default}}
                    /** set default value **/
                    queryParameters['{{&name}}'] = {{&default}};
                {{/default}}

                {{^isPatternType}}
                if(parameters['{{&camelCaseName}}'] !== undefined){
                    queryParameters['{{&name}}'] = resolve.value(parameters['{{&camelCaseName}}']);
                }
                {{/isPatternType}}
            {{/isSingleton}}
        {{/isQueryParameter}}

        {{#isPathParameter}}
            urlPath = urlPath.replace('{{=<% %>=}}{<%&name%>}<%={{ }}=%>', parameters['{{&camelCaseName}}']);
        {{/isPathParameter}}

        {{#isHeaderParameter}}
            {{#isSingleton}}
                headers['{{&name}}'] = '{{&singleton}}';
            {{/isSingleton}}
            {{^isSingleton}}
                if(parameters['{{&camelCaseName}}'] !== undefined){
                    headers['{{&name}}'] = resolve.value(parameters['{{&camelCaseName}}']);
                }
            {{/isSingleton}}
        {{/isHeaderParameter}}

        {{#isBodyParameter}}
            if(parameters['{{&camelCaseName}}'] !== undefined){
                body = resolve.value(parameters['{{&camelCaseName}}']);
            }
        {{/isBodyParameter}}

         {{#isFormParameter}}
            {{#isSingleton}}
                form['{{&name}}'] = '{{&singleton}}';
            {{/isSingleton}}
            {{^isSingleton}}
                if(parameters['{{&camelCaseName}}'] !== undefined){
                    form['{{&name}}'] = resolve.value(parameters['{{&camelCaseName}}']);
                }
            {{/isSingleton}}
        {{/isFormParameter}}

        {{#required}}
        if(parameters['{{&camelCaseName}}'] === undefined){
            throw new Error('Missing required {{&paramType}} parameter: {{&camelCaseName}}');
        }
        {{/required}}

    {{/parameters}}
    queryParameters = mergeQueryParams(parameters, queryParameters);

    let resolvedBody = undefined;
    if(body && Object.keys(body).length) {
      resolvedBody = convertObjectWithTemplates(body, resolve);
    }


    const queryParams =
      queryParameters && Object.keys(queryParameters).length
        ? "?" + serializeQueryParams(queryParameters)
        : "";
    const resolvedURL = "/v1/api" + resolve.value(urlPath) + queryParams;

    return processResponse(
      http.request( {
        url: resolvedURL,
        query: queryParameters,
        method: '{{method}}',
        headers,
        body: resolvedBody,
      }),
      path
    );
  }
 };

